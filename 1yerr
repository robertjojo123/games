-- Game Computer Script (Final with retry, sounds, stats, output swap)

local modem = peripheral.wrap("bottom")
local speaker = peripheral.find("speaker")
modem.open(1)
local STATS_FILE = "stats.txt"

-- Persistent stats
local function loadStats()
    if fs.exists(STATS_FILE) then
        local f = fs.open(STATS_FILE, "r")
        local data = textutils.unserialize(f.readAll())
        f.close()
        return data or {}
    end
    return {}
end

local function saveStats(stats)
    local f = fs.open(STATS_FILE, "w")
    f.write(textutils.serialize(stats))
    f.close()
end

local stats = loadStats()
stats.totalPlays = stats.totalPlays or 0
stats.wins2x = stats.wins2x or 0
stats.wins5x = stats.wins5x or 0
stats.payoutBalance = stats.payoutBalance or 0

-- Messaging
local function sendMessage(msg)
    modem.transmit(1, 1, msg)
end

local function receiveMessage(timeout)
    local timer = os.startTimer(timeout or 2)
    while true do
        local event, side, ch, _, msg = os.pullEvent()
        if event == "modem_message" and ch == 1 then
            return msg
        elseif event == "timer" and side == timer then
            return nil -- timeout
        end
    end
end

-- Sounds
local function playAcceptSound()
    if speaker then speaker.playNote("pling", 1, 7) end
end

local function playDenialSound()
    if speaker then speaker.playNote("bass", 1, 3) end
end

local function playDenialSequence()
    for i = 1, 3 do
        playDenialSound()
        sleep(0.2)
    end
end

local function playWinSequence(count)
    for i = 1, count do
        playAcceptSound()
        sleep(0.2)
    end
end

-- Repeatedly request until confirmed or redstone turns off
local function waitForBankItem()
    while redstone.getInput("top") do
        sendMessage("request_item")
        local reply = receiveMessage(2)
        if reply == "item_transferred" then
            playAcceptSound()
            return true
        elseif reply == "no_item" then
            playDenialSequence()
        end
        sleep(0.1)
    end
    return false
end

-- Slot logic
local function setOutputStrength(side, strength)
    redstone.setAnalogOutput(side, strength)
end

local function biasedLeftStrength()
    return (math.random(100) <= 75) and math.random(4, 5) or 6
end

local function decideFront(left)
    if math.random(1000) <= 810 then return left end
    repeat
        local alt = math.random(4, 6)
        if alt ~= left then return alt end
    until false
end

local function decideRight(left, front)
    if left == front then
        if left == 6 and math.random(1000) <= 235 then return 6
        elseif left ~= 6 and math.random(1000) <= 549 then return left end
    end
    repeat
        local pick = math.random(4, 6)
        if pick ~= left or pick ~= front then return pick end
    until false
end

local function cycleReel(side, duration, finalStrength)
    local sequence = {4, 5, 6}
    local index = 1
    local start = os.clock()
    while os.clock() - start < duration do
        local strength = sequence[index]
        if strength ~= finalStrength then
            setOutputStrength(side, strength)
            sleep(0.6)
            setOutputStrength(side, 0)
            sleep(0.75)
        end
        index = (index % #sequence) + 1
    end
    setOutputStrength(side, finalStrength)
end

-- MAIN LOOP
while true do
    if redstone.getInput("top") then
        -- Try to get a token from the bank before playing
        if waitForBankItem() then
            -- Run one game cycle
            local playTime = 15
            local left = biasedLeftStrength()
            local front = decideFront(left)
            local right = decideRight(left, front)

            local leftDur = playTime / 3
            local frontDur = (2 * playTime) / 3
            local rightDur = playTime

            -- Swapped outputs: left → right, right → left
            parallel.waitForAll(
                function() cycleReel("right", leftDur, left) end,
                function() cycleReel("front", frontDur, front) end,
                function() cycleReel("left", rightDur, right) end
            )

            stats.totalPlays = stats.totalPlays + 1
            stats.payoutBalance = stats.payoutBalance - 1

            print(string.format("L:%d F:%d R:%d", left, front, right))

            if left == front and front == right then
                if right == 6 then
                    stats.wins5x = stats.wins5x + 1
                    stats.payoutBalance = stats.payoutBalance + 5
                    sendMessage({type = "payout", amount = 5})
                    playWinSequence(5)
                    print(">>> JACKPOT 5x WIN!")
                else
                    stats.wins2x = stats.wins2x + 1
                    stats.payoutBalance = stats.payoutBalance + 2
                    sendMessage({type = "payout", amount = 2})
                    playWinSequence(2)
                    print(">>> 2x WIN!")
                end
            else
                playDenialSequence()
                print("No win.")
            end

            saveStats(stats)
            print(string.format("Plays: %d | 2x Wins: %d | 5x Wins: %d | Payout: %+d",
                stats.totalPlays, stats.wins2x, stats.wins5x, stats.payoutBalance))

            sleep(playTime)
        end
    end
    sleep(0.1)
end
