-- Bank Computer Script: Accepts 1 token, dispenses 2 or 5 if player wins

local modem = peripheral.wrap("bottom")
modem.open(1)

-- Track last token deposited
local lastToken = {
    name = nil,
    nbtPrefix = nil
}

local function sendMessage(msg)
    modem.transmit(1, 1, msg)
end

local function receiveMessage()
    while true do
        local event, _, ch, _, msg = os.pullEvent("modem_message")
        if ch == 1 then return msg end
    end
end

-- Move 1 token from back chest to left chest and track it
local function transferSingleToken()
    local input = peripheral.wrap("back")
    local storage = peripheral.wrap("left")
    if not input or not storage then return false end

    for slot, item in pairs(input.list()) do
        if item.nbtHash then
            lastToken.name = item.name
            lastToken.nbtPrefix = string.sub(item.nbtHash, 1, 7)
            input.pushItems(peripheral.getName(storage), slot, 1)
            print("Accepted token: " .. lastToken.name .. " | Prefix: " .. lastToken.nbtPrefix)
            return true
        end
    end
    return false
end

-- Dispense exact token count (2 or 5) to top dropper
local function dispenseMatchingTokens(count)
    if not lastToken.name or not lastToken.nbtPrefix then
        print("No token info stored.")
        return
    end

    local chest = peripheral.wrap("left")
    local dropper = peripheral.wrap("top")
    if not chest or not dropper then return end

    local dispensed = 0

    for slot = 1, chest.size() do
        if dispensed >= count then break end

        local slotItem = chest.getItemDetail(slot)
        if slotItem and slotItem.name and slotItem.nbtHash then
            local prefix = string.sub(slotItem.nbtHash, 1, 7)
            if slotItem.name == lastToken.name and prefix == lastToken.nbtPrefix then
                local toMove = math.min(slotItem.count, count - dispensed)
                chest.pushItems(peripheral.getName(dropper), slot, toMove)

                for i = 1, toMove do
                    redstone.setOutput("top", true)
                    sleep(0.4)
                    redstone.setOutput("top", false)
                    sleep(0.1)
                end

                dispensed = dispensed + toMove
            end
        end
    end

    print("Dispensed " .. dispensed .. "x " .. lastToken.name)
end

-- Main program loop
while true do
    local msg = receiveMessage()

    if msg == "request_item" then
        if transferSingleToken() then
            sendMessage("item_transferred")
        else
            sendMessage("no_item")
        end

    elseif type(msg) == "table" and msg.type == "payout" and type(msg.amount) == "number" then
        dispenseMatchingTokens(msg.amount)
    end
end
