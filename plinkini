-- Unified Plinko System (Starter, Splitter, Receiver) - Continuous

local label = os.getComputerLabel()
if not label then
    print("❌ Please label this computer as 'starter', 'splitter', or 'receiver'")
    return
end

math.randomseed(os.time())

local function pulse(side)
    redstone.setOutput(side, true)
    sleep(0.2)
    redstone.setOutput(side, false)
end

local function randomSide()
    return math.random(2) == 1 and "left" or "right"
end

-- STARTER NODE
if label == "starter" then
    local modem = peripheral.wrap("top")
    if not modem then error("❌ No modem on top") end
    rednet.open("top")

    print("🎮 Starter ready (continuous). Waiting for wireless plays...")

    while true do
        local _, msg = rednet.receive()
        if msg == "start_plinko" then
            local dir = randomSide()
            print("🎯 Starter pulse to:", dir)
            pulse(dir)
        end
    end

-- SPLITTER NODE
elseif label == "splitter" then
    print("🔀 Splitter ready (continuous). Listening for top redstone...")

    while true do
        if redstone.getInput("top") then
            local dir = randomSide()
            print("↪️ Splitter to:", dir)
            pulse(dir)
            while redstone.getInput("top") do sleep(0.01) end
        end
        sleep(0.01)
    end

-- RECEIVER NODE
elseif label == "receiver" then
    local modem = peripheral.wrap("bottom")
    if not modem then error("❌ No modem on bottom") end
    rednet.open("bottom")

    local front = peripheral.wrap("front")
    local stock = peripheral.wrap("back")
    local dropper = peripheral.wrap("top")

    local VALID_TOKENS = {
        ["01cf97"] = {value = 500},
        ["dd703d"] = {value = 1000},
        ["e61758"] = {value = 5000},
        ["1fafe1"] = {value = 10000},
        ["6d281b"] = {value = 15000},
    }

    local PAYOUT_MULTIPLIERS = {
        [1] = 5,  -- outer
        [2] = 2,  -- inner
        [3] = 0,  -- center
        [4] = 0,
        [5] = 2,
        [6] = 5
    }

    local function pullOneToken()
        local items = front.list()
        local item = items[1]
        if item and item.nbtHash then
            local prefix = string.sub(item.nbtHash, 1, 6)
            if VALID_TOKENS[prefix] then
                local moved = front.pushItems(peripheral.getName(stock), 1, 1)
                if moved == 1 then
                    print("✅ Pulled token: " .. prefix)
                    return item.name, prefix
                end
            end
        end
        return nil
    end

    local function dispenseTokens(name, prefix, count)
        local dispensed = 0
        for slot, item in pairs(stock.list()) do
            if item.name == name and item.nbtHash then
                local hash = string.sub(item.nbtHash, 1, 6)
                if hash == prefix then
                    local toMove = math.min(count - dispensed, item.count)
                    stock.pushItems(peripheral.getName(dropper), slot, toMove)
                    for i = 1, toMove do
                        redstone.setOutput("top", true)
                        sleep(0.2)
                        redstone.setOutput("top", false)
                        sleep(0.1)
                    end
                    dispensed = dispensed + toMove
                    if dispensed >= count then break end
                end
            end
        end
    end

    print("🎯 Receiver ready (continuous). Waiting for plays...")

    while true do
        if redstone.getInput("top") then
            local name, prefix = pullOneToken()
            if name then
                rednet.broadcast("start_plinko")
                print("📡 Sent start. Waiting for result...")

                -- Wait for result from redstone
                local result = nil
                repeat
                    local l = redstone.getAnalogInput("left")
                    local r = redstone.getAnalogInput("right")
                    result = math.max(l, r)
                    sleep(0.05)
                until result >= 1 and result <= 6

                local mult = PAYOUT_MULTIPLIERS[result] or 0
                print("🎲 Zone:", result, "→ " .. mult .. "x payout")

                if mult > 0 then
                    dispenseTokens(name, prefix, mult)
                else
                    print("❌ No payout")
                end

                -- Wait for signal clear
                while redstone.getAnalogInput("left") > 0 or redstone.getAnalogInput("right") > 0 do
                    sleep(0.1)
                end
            else
                print("❌ Invalid or missing token")
            end

            -- Wait for button reset
            while redstone.getInput("top") do sleep(0.1) end
        end
        sleep(0.05)
    end

else
    print("❌ Invalid label. Use 'starter', 'splitter', or 'receiver'")
end
