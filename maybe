-- Bank Computer: Input & Output match by name + hash prefix (same chest type)

local modem = peripheral.wrap("bottom")
modem.open(1)

-- Valid hash prefixes (first 6 chars)
local VALID_PREFIXES = {
    ["01cf97"] = true,
    ["dd703d"] = true,
    ["e61758"] = true,
    ["1fafe1"] = true,
    ["6d281b"] = true,
}

-- Store exact item type
local lastToken = {
    name = nil,
    hashPrefix = nil
}

local function sendMessage(msg)
    modem.transmit(1, 1, msg)
end

local function receiveMessage()
    while true do
        local event, _, ch, _, msg = os.pullEvent("modem_message")
        if ch == 1 then return msg end
    end
end

-- Accept 1 valid token from back chest
local function transferSingleToken()
    local input = peripheral.wrap("back")
    local storage = peripheral.wrap("left")
    if not input or not storage then return false end

    for slot, item in pairs(input.list()) do
        if item and item.nbtHash then
            local prefix = string.sub(item.nbtHash, 1, 6)
            if VALID_PREFIXES[prefix] then
                input.pushItems(peripheral.getName(storage), slot, 1)
                lastToken.name = item.name
                lastToken.hashPrefix = prefix
                print("‚úîÔ∏è Accepted token:", item.name, "| Prefix:", prefix)
                return true
            else
                print("‚ùå Invalid token prefix:", prefix)
            end
        end
    end

    return false
end

-- Dispense N tokens matching name + hash prefix
local function dispenseMatchingTokens(count)
    if not lastToken.name or not lastToken.hashPrefix then
        print("‚ùå No token info recorded.")
        return
    end

    local storage = peripheral.wrap("left")
    local dropper = peripheral.wrap("top")
    if not storage or not dropper then
        print("‚ùå Storage or dropper not found.")
        return
    end

    local dispensed = 0
    local items = storage.list()

    for slot, item in pairs(items) do
        if dispensed >= count then break end

        if item.name == lastToken.name and item.nbtHash then
            local prefix = string.sub(item.nbtHash, 1, 6)
            if prefix == lastToken.hashPrefix then
                local toMove = math.min(item.count, count - dispensed)
                storage.pushItems(peripheral.getName(dropper), slot, toMove)

                for i = 1, toMove do
                    redstone.setOutput("top", true)
                    sleep(0.4)
                    redstone.setOutput("top", false)
                    sleep(0.1)
                end

                dispensed = dispensed + toMove
                print("‚úÖ Dispensed", toMove, "of", item.name, "| Prefix:", prefix)
            end
        end
    end

    print("üèÅ Total Dispensed:", dispensed)
end

-- Main Loop
while true do
    local msg = receiveMessage()

    if msg == "request_item" then
        if transferSingleToken() then
            sendMessage("item_transferred")
        else
            sendMessage("no_item")
        end

    elseif type(msg) == "table" and msg.type == "payout" and type(msg.amount) == "number" then
        dispenseMatchingTokens(msg.amount)
    end
end
